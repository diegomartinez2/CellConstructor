name: Python application with Meson

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies (Meson and Ninja)
      run: |
        python -m pip install --upgrade pip
        pip install meson ninja
        # Si tu proyecto Python tiene dependencias que Meson no gestiona,
        # instálalas aquí con pip. Por ejemplo:
        # pip install -r requirements.txt
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ matrix.python-version }}-
    - name: Configure build with Meson
      run: meson setup builddir
      # Puedes pasar opciones de configuración a Meson si es necesario:
      # run: meson setup builddir -Dsome_option=true
    - name: Compile with Meson/Ninja
      run: meson compile -C builddir
      # O directamente con Ninja:
      # run: ninja -C builddir
    - name: Run tests with Meson
      run: meson test -C builddir
      # Si tus pruebas no están integradas con Meson,
      # puedes ejecutar pytest u otra herramienta aquí:
      # run: pytest builddir
    - name: Lint with flake8 (Optional, if not handled by Meson)
      run: |
        pip install flake8
        flake8 . --count --select=E901,F63,F7,F82 --show-source --statistics
